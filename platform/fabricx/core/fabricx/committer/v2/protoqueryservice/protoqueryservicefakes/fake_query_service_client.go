// Code generated by counterfeiter. DO NOT EDIT.
package protoqueryservicefakes

import (
	"context"
	"sync"

	"github.com/hyperledger/fabric-x-endorser/platform/fabricx/core/fabricx/committer/v2/protoblocktx"
	"github.com/hyperledger/fabric-x-endorser/platform/fabricx/core/fabricx/committer/v2/protoqueryservice"
	"google.golang.org/grpc"
)

type FakeQueryServiceClient struct {
	BeginViewStub        func(context.Context, *protoqueryservice.ViewParameters, ...grpc.CallOption) (*protoqueryservice.View, error)
	beginViewMutex       sync.RWMutex
	beginViewArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.ViewParameters
		arg3 []grpc.CallOption
	}
	beginViewReturns struct {
		result1 *protoqueryservice.View
		result2 error
	}
	beginViewReturnsOnCall map[int]struct {
		result1 *protoqueryservice.View
		result2 error
	}
	EndViewStub        func(context.Context, *protoqueryservice.View, ...grpc.CallOption) (*protoqueryservice.View, error)
	endViewMutex       sync.RWMutex
	endViewArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.View
		arg3 []grpc.CallOption
	}
	endViewReturns struct {
		result1 *protoqueryservice.View
		result2 error
	}
	endViewReturnsOnCall map[int]struct {
		result1 *protoqueryservice.View
		result2 error
	}
	GetPoliciesStub        func(context.Context, *protoqueryservice.Empty, ...grpc.CallOption) (*protoblocktx.Policies, error)
	getPoliciesMutex       sync.RWMutex
	getPoliciesArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.Empty
		arg3 []grpc.CallOption
	}
	getPoliciesReturns struct {
		result1 *protoblocktx.Policies
		result2 error
	}
	getPoliciesReturnsOnCall map[int]struct {
		result1 *protoblocktx.Policies
		result2 error
	}
	GetRowsStub        func(context.Context, *protoqueryservice.Query, ...grpc.CallOption) (*protoqueryservice.Rows, error)
	getRowsMutex       sync.RWMutex
	getRowsArgsForCall []struct {
		arg1 context.Context
		arg2 *protoqueryservice.Query
		arg3 []grpc.CallOption
	}
	getRowsReturns struct {
		result1 *protoqueryservice.Rows
		result2 error
	}
	getRowsReturnsOnCall map[int]struct {
		result1 *protoqueryservice.Rows
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueryServiceClient) BeginView(arg1 context.Context, arg2 *protoqueryservice.ViewParameters, arg3 ...grpc.CallOption) (*protoqueryservice.View, error) {
	fake.beginViewMutex.Lock()
	ret, specificReturn := fake.beginViewReturnsOnCall[len(fake.beginViewArgsForCall)]
	fake.beginViewArgsForCall = append(fake.beginViewArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.ViewParameters
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.BeginViewStub
	fakeReturns := fake.beginViewReturns
	fake.recordInvocation("BeginView", []interface{}{arg1, arg2, arg3})
	fake.beginViewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) BeginViewCallCount() int {
	fake.beginViewMutex.RLock()
	defer fake.beginViewMutex.RUnlock()
	return len(fake.beginViewArgsForCall)
}

func (fake *FakeQueryServiceClient) BeginViewCalls(stub func(context.Context, *protoqueryservice.ViewParameters, ...grpc.CallOption) (*protoqueryservice.View, error)) {
	fake.beginViewMutex.Lock()
	defer fake.beginViewMutex.Unlock()
	fake.BeginViewStub = stub
}

func (fake *FakeQueryServiceClient) BeginViewArgsForCall(i int) (context.Context, *protoqueryservice.ViewParameters, []grpc.CallOption) {
	fake.beginViewMutex.RLock()
	defer fake.beginViewMutex.RUnlock()
	argsForCall := fake.beginViewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) BeginViewReturns(result1 *protoqueryservice.View, result2 error) {
	fake.beginViewMutex.Lock()
	defer fake.beginViewMutex.Unlock()
	fake.BeginViewStub = nil
	fake.beginViewReturns = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) BeginViewReturnsOnCall(i int, result1 *protoqueryservice.View, result2 error) {
	fake.beginViewMutex.Lock()
	defer fake.beginViewMutex.Unlock()
	fake.BeginViewStub = nil
	if fake.beginViewReturnsOnCall == nil {
		fake.beginViewReturnsOnCall = make(map[int]struct {
			result1 *protoqueryservice.View
			result2 error
		})
	}
	fake.beginViewReturnsOnCall[i] = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) EndView(arg1 context.Context, arg2 *protoqueryservice.View, arg3 ...grpc.CallOption) (*protoqueryservice.View, error) {
	fake.endViewMutex.Lock()
	ret, specificReturn := fake.endViewReturnsOnCall[len(fake.endViewArgsForCall)]
	fake.endViewArgsForCall = append(fake.endViewArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.View
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.EndViewStub
	fakeReturns := fake.endViewReturns
	fake.recordInvocation("EndView", []interface{}{arg1, arg2, arg3})
	fake.endViewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) EndViewCallCount() int {
	fake.endViewMutex.RLock()
	defer fake.endViewMutex.RUnlock()
	return len(fake.endViewArgsForCall)
}

func (fake *FakeQueryServiceClient) EndViewCalls(stub func(context.Context, *protoqueryservice.View, ...grpc.CallOption) (*protoqueryservice.View, error)) {
	fake.endViewMutex.Lock()
	defer fake.endViewMutex.Unlock()
	fake.EndViewStub = stub
}

func (fake *FakeQueryServiceClient) EndViewArgsForCall(i int) (context.Context, *protoqueryservice.View, []grpc.CallOption) {
	fake.endViewMutex.RLock()
	defer fake.endViewMutex.RUnlock()
	argsForCall := fake.endViewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) EndViewReturns(result1 *protoqueryservice.View, result2 error) {
	fake.endViewMutex.Lock()
	defer fake.endViewMutex.Unlock()
	fake.EndViewStub = nil
	fake.endViewReturns = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) EndViewReturnsOnCall(i int, result1 *protoqueryservice.View, result2 error) {
	fake.endViewMutex.Lock()
	defer fake.endViewMutex.Unlock()
	fake.EndViewStub = nil
	if fake.endViewReturnsOnCall == nil {
		fake.endViewReturnsOnCall = make(map[int]struct {
			result1 *protoqueryservice.View
			result2 error
		})
	}
	fake.endViewReturnsOnCall[i] = struct {
		result1 *protoqueryservice.View
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetPolicies(arg1 context.Context, arg2 *protoqueryservice.Empty, arg3 ...grpc.CallOption) (*protoblocktx.Policies, error) {
	fake.getPoliciesMutex.Lock()
	ret, specificReturn := fake.getPoliciesReturnsOnCall[len(fake.getPoliciesArgsForCall)]
	fake.getPoliciesArgsForCall = append(fake.getPoliciesArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.Empty
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetPoliciesStub
	fakeReturns := fake.getPoliciesReturns
	fake.recordInvocation("GetPolicies", []interface{}{arg1, arg2, arg3})
	fake.getPoliciesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) GetPoliciesCallCount() int {
	fake.getPoliciesMutex.RLock()
	defer fake.getPoliciesMutex.RUnlock()
	return len(fake.getPoliciesArgsForCall)
}

func (fake *FakeQueryServiceClient) GetPoliciesCalls(stub func(context.Context, *protoqueryservice.Empty, ...grpc.CallOption) (*protoblocktx.Policies, error)) {
	fake.getPoliciesMutex.Lock()
	defer fake.getPoliciesMutex.Unlock()
	fake.GetPoliciesStub = stub
}

func (fake *FakeQueryServiceClient) GetPoliciesArgsForCall(i int) (context.Context, *protoqueryservice.Empty, []grpc.CallOption) {
	fake.getPoliciesMutex.RLock()
	defer fake.getPoliciesMutex.RUnlock()
	argsForCall := fake.getPoliciesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) GetPoliciesReturns(result1 *protoblocktx.Policies, result2 error) {
	fake.getPoliciesMutex.Lock()
	defer fake.getPoliciesMutex.Unlock()
	fake.GetPoliciesStub = nil
	fake.getPoliciesReturns = struct {
		result1 *protoblocktx.Policies
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetPoliciesReturnsOnCall(i int, result1 *protoblocktx.Policies, result2 error) {
	fake.getPoliciesMutex.Lock()
	defer fake.getPoliciesMutex.Unlock()
	fake.GetPoliciesStub = nil
	if fake.getPoliciesReturnsOnCall == nil {
		fake.getPoliciesReturnsOnCall = make(map[int]struct {
			result1 *protoblocktx.Policies
			result2 error
		})
	}
	fake.getPoliciesReturnsOnCall[i] = struct {
		result1 *protoblocktx.Policies
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetRows(arg1 context.Context, arg2 *protoqueryservice.Query, arg3 ...grpc.CallOption) (*protoqueryservice.Rows, error) {
	fake.getRowsMutex.Lock()
	ret, specificReturn := fake.getRowsReturnsOnCall[len(fake.getRowsArgsForCall)]
	fake.getRowsArgsForCall = append(fake.getRowsArgsForCall, struct {
		arg1 context.Context
		arg2 *protoqueryservice.Query
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetRowsStub
	fakeReturns := fake.getRowsReturns
	fake.recordInvocation("GetRows", []interface{}{arg1, arg2, arg3})
	fake.getRowsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryServiceClient) GetRowsCallCount() int {
	fake.getRowsMutex.RLock()
	defer fake.getRowsMutex.RUnlock()
	return len(fake.getRowsArgsForCall)
}

func (fake *FakeQueryServiceClient) GetRowsCalls(stub func(context.Context, *protoqueryservice.Query, ...grpc.CallOption) (*protoqueryservice.Rows, error)) {
	fake.getRowsMutex.Lock()
	defer fake.getRowsMutex.Unlock()
	fake.GetRowsStub = stub
}

func (fake *FakeQueryServiceClient) GetRowsArgsForCall(i int) (context.Context, *protoqueryservice.Query, []grpc.CallOption) {
	fake.getRowsMutex.RLock()
	defer fake.getRowsMutex.RUnlock()
	argsForCall := fake.getRowsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQueryServiceClient) GetRowsReturns(result1 *protoqueryservice.Rows, result2 error) {
	fake.getRowsMutex.Lock()
	defer fake.getRowsMutex.Unlock()
	fake.GetRowsStub = nil
	fake.getRowsReturns = struct {
		result1 *protoqueryservice.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) GetRowsReturnsOnCall(i int, result1 *protoqueryservice.Rows, result2 error) {
	fake.getRowsMutex.Lock()
	defer fake.getRowsMutex.Unlock()
	fake.GetRowsStub = nil
	if fake.getRowsReturnsOnCall == nil {
		fake.getRowsReturnsOnCall = make(map[int]struct {
			result1 *protoqueryservice.Rows
			result2 error
		})
	}
	fake.getRowsReturnsOnCall[i] = struct {
		result1 *protoqueryservice.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.beginViewMutex.RLock()
	defer fake.beginViewMutex.RUnlock()
	fake.endViewMutex.RLock()
	defer fake.endViewMutex.RUnlock()
	fake.getPoliciesMutex.RLock()
	defer fake.getPoliciesMutex.RUnlock()
	fake.getRowsMutex.RLock()
	defer fake.getRowsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueryServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protoqueryservice.QueryServiceClient = new(FakeQueryServiceClient)
