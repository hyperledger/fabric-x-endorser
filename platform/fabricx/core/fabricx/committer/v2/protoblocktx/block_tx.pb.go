// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: platform/fabric/core/fabricx/committer/v2/protoblocktx/block_tx.proto

package protoblocktx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_COMMITTED                         Status = 0
	Status_ABORTED_MVCC_CONFLICT             Status = 1
	Status_ABORTED_DUPLICATE_TXID            Status = 2
	Status_ABORTED_SIGNATURE_INVALID         Status = 3
	Status_ABORTED_MISSING_TXID              Status = 4
	Status_ABORTED_DUPLICATE_NAMESPACE       Status = 5
	Status_ABORTED_NAMESPACE_POLICY_INVALID  Status = 6
	Status_ABORTED_NAMESPACE_ID_INVALID      Status = 7
	Status_ABORTED_MISSING_NAMESPACE_VERSION Status = 8
	Status_ABORTED_BLIND_WRITES_NOT_ALLOWED  Status = 9
	Status_ABORTED_NO_WRITES                 Status = 10
	Status_ABORTED_UNSUPPORTED_TX_PAYLOAD    Status = 11
	Status_NOT_VALIDATED                     Status = 255
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:   "COMMITTED",
		1:   "ABORTED_MVCC_CONFLICT",
		2:   "ABORTED_DUPLICATE_TXID",
		3:   "ABORTED_SIGNATURE_INVALID",
		4:   "ABORTED_MISSING_TXID",
		5:   "ABORTED_DUPLICATE_NAMESPACE",
		6:   "ABORTED_NAMESPACE_POLICY_INVALID",
		7:   "ABORTED_NAMESPACE_ID_INVALID",
		8:   "ABORTED_MISSING_NAMESPACE_VERSION",
		9:   "ABORTED_BLIND_WRITES_NOT_ALLOWED",
		10:  "ABORTED_NO_WRITES",
		11:  "ABORTED_UNSUPPORTED_TX_PAYLOAD",
		255: "NOT_VALIDATED",
	}
	Status_value = map[string]int32{
		"COMMITTED":                         0,
		"ABORTED_MVCC_CONFLICT":             1,
		"ABORTED_DUPLICATE_TXID":            2,
		"ABORTED_SIGNATURE_INVALID":         3,
		"ABORTED_MISSING_TXID":              4,
		"ABORTED_DUPLICATE_NAMESPACE":       5,
		"ABORTED_NAMESPACE_POLICY_INVALID":  6,
		"ABORTED_NAMESPACE_ID_INVALID":      7,
		"ABORTED_MISSING_NAMESPACE_VERSION": 8,
		"ABORTED_BLIND_WRITES_NOT_ALLOWED":  9,
		"ABORTED_NO_WRITES":                 10,
		"ABORTED_UNSUPPORTED_TX_PAYLOAD":    11,
		"NOT_VALIDATED":                     255,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{0}
}

// Represents a block in the blockchain.
type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        uint64                 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`                      // The block number.
	Txs           []*Tx                  `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`                             // List of transactions within the block.
	TxsNum        []uint32               `protobuf:"varint,3,rep,packed,name=txs_num,json=txsNum,proto3" json:"txs_num,omitempty"` // Transaction number within the block generated by the orderer.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetTxs() []*Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *Block) GetTxsNum() []uint32 {
	if x != nil {
		return x.TxsNum
	}
	return nil
}

// Represents a transaction in the blockchain.
type Tx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // The transaction ID.
	Namespaces    []*TxNamespace         `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"` // Namespaces associated with the transaction.
	Signatures    [][]byte               `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"` // signature per namespace.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tx) Reset() {
	*x = Tx{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{1}
}

func (x *Tx) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tx) GetNamespaces() []*TxNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Tx) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Represents a namespace within a transaction.
type TxNamespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NsId          string                 `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"ns_id,omitempty"`                      // The namespace ID.
	NsVersion     []byte                 `protobuf:"bytes,2,opt,name=ns_version,json=nsVersion,proto3" json:"ns_version,omitempty"`       // The version of the namespace.
	ReadsOnly     []*Read                `protobuf:"bytes,3,rep,name=reads_only,json=readsOnly,proto3" json:"reads_only,omitempty"`       // List of read only operations within the namespace.
	ReadWrites    []*ReadWrite           `protobuf:"bytes,4,rep,name=read_writes,json=readWrites,proto3" json:"read_writes,omitempty"`    // List of read-write operations within the namespace.
	BlindWrites   []*Write               `protobuf:"bytes,5,rep,name=blind_writes,json=blindWrites,proto3" json:"blind_writes,omitempty"` // List of blind write operations within the namespace.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxNamespace) Reset() {
	*x = TxNamespace{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxNamespace) ProtoMessage() {}

func (x *TxNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxNamespace.ProtoReflect.Descriptor instead.
func (*TxNamespace) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{2}
}

func (x *TxNamespace) GetNsId() string {
	if x != nil {
		return x.NsId
	}
	return ""
}

func (x *TxNamespace) GetNsVersion() []byte {
	if x != nil {
		return x.NsVersion
	}
	return nil
}

func (x *TxNamespace) GetReadsOnly() []*Read {
	if x != nil {
		return x.ReadsOnly
	}
	return nil
}

func (x *TxNamespace) GetReadWrites() []*ReadWrite {
	if x != nil {
		return x.ReadWrites
	}
	return nil
}

func (x *TxNamespace) GetBlindWrites() []*Write {
	if x != nil {
		return x.BlindWrites
	}
	return nil
}

// Represents a read operation.
type Read struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`         // The key being read.
	Version       []byte                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // The version of the key being read.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Read) Reset() {
	*x = Read{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Read) ProtoMessage() {}

func (x *Read) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Read.ProtoReflect.Descriptor instead.
func (*Read) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{3}
}

func (x *Read) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Read) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

// Represents a read-write operation.
type ReadWrite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // The key involved in the read-write operation.
	// If the key is empty, the key would be constructed using the txID
	// and the index of the read-write operation.
	Version       []byte `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // The version of the key being read and written.
	Value         []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`     // The value associated with the key being written.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadWrite) Reset() {
	*x = ReadWrite{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWrite) ProtoMessage() {}

func (x *ReadWrite) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWrite.ProtoReflect.Descriptor instead.
func (*ReadWrite) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{4}
}

func (x *ReadWrite) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReadWrite) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ReadWrite) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a write operation.
type Write struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // The key being written.
	// If the key is empty, the key would be constructed using the txID
	// and the index of the read-write operation.
	Value         []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // The value associated with the key being written.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Write) Reset() {
	*x = Write{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Write) ProtoMessage() {}

func (x *Write) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Write.ProtoReflect.Descriptor instead.
func (*Write) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{5}
}

func (x *Write) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Write) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a namespace policy.
type NamespacePolicy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scheme        string                 `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`                        // The scheme for signature verification.
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // The public key for signature verification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespacePolicy) Reset() {
	*x = NamespacePolicy{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespacePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacePolicy) ProtoMessage() {}

func (x *NamespacePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacePolicy.ProtoReflect.Descriptor instead.
func (*NamespacePolicy) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{6}
}

func (x *NamespacePolicy) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *NamespacePolicy) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type BlockInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        uint64                 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{7}
}

func (x *BlockInfo) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type QueryStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxIDs         []string               `protobuf:"bytes,1,rep,name=txIDs,proto3" json:"txIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryStatus) Reset() {
	*x = QueryStatus{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus) ProtoMessage() {}

func (x *QueryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus.ProtoReflect.Descriptor instead.
func (*QueryStatus) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{8}
}

func (x *QueryStatus) GetTxIDs() []string {
	if x != nil {
		return x.TxIDs
	}
	return nil
}

type TransactionsStatus struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Status        map[string]*StatusWithHeight `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionsStatus) Reset() {
	*x = TransactionsStatus{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsStatus) ProtoMessage() {}

func (x *TransactionsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsStatus.ProtoReflect.Descriptor instead.
func (*TransactionsStatus) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionsStatus) GetStatus() map[string]*StatusWithHeight {
	if x != nil {
		return x.Status
	}
	return nil
}

type StatusWithHeight struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          Status                 `protobuf:"varint,1,opt,name=code,proto3,enum=protoblocktx_rc_0_2.Status" json:"code,omitempty"`
	BlockNumber   uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxNumber      uint32                 `protobuf:"varint,3,opt,name=tx_number,json=txNumber,proto3" json:"tx_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusWithHeight) Reset() {
	*x = StatusWithHeight{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusWithHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusWithHeight) ProtoMessage() {}

func (x *StatusWithHeight) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusWithHeight.ProtoReflect.Descriptor instead.
func (*StatusWithHeight) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{10}
}

func (x *StatusWithHeight) GetCode() Status {
	if x != nil {
		return x.Code
	}
	return Status_COMMITTED
}

func (x *StatusWithHeight) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *StatusWithHeight) GetTxNumber() uint32 {
	if x != nil {
		return x.TxNumber
	}
	return 0
}

type Policies struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Policies      []*PolicyItem          `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policies) Reset() {
	*x = Policies{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{11}
}

func (x *Policies) GetPolicies() []*PolicyItem {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PolicyItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Policy        []byte                 `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Version       []byte                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyItem) Reset() {
	*x = PolicyItem{}
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyItem) ProtoMessage() {}

func (x *PolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyItem.ProtoReflect.Descriptor instead.
func (*PolicyItem) Descriptor() ([]byte, []int) {
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP(), []int{12}
}

func (x *PolicyItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PolicyItem) GetPolicy() []byte {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *PolicyItem) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

var File_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto protoreflect.FileDescriptor

var file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDesc = string([]byte{
	0x0a, 0x45, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x78, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32, 0x22, 0x63, 0x0a, 0x05,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32,
	0x2e, 0x54, 0x78, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x78, 0x73, 0x4e, 0x75,
	0x6d, 0x22, 0x76, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f,
	0x32, 0x2e, 0x54, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x54, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x6e, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78,
	0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30,
	0x5f, 0x32, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63,
	0x5f, 0x30, 0x5f, 0x32, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x09, 0x52,
	0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x05, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x0f, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x23, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x49, 0x44, 0x73, 0x22,
	0xc3, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x74, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x08, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x5f, 0x72, 0x63, 0x5f, 0x30, 0x5f, 0x32, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2a, 0x8c, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x56, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x58, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x58, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x0b, 0x12, 0x12, 0x0a,
	0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0xff,
	0x01, 0x42, 0x69, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x62, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x2d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x66, 0x73, 0x63, 0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescOnce sync.Once
	file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescData []byte
)

func file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescGZIP() []byte {
	file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescOnce.Do(func() {
		file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDesc), len(file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDesc)))
	})
	return file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDescData
}

var file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_goTypes = []any{
	(Status)(0),                // 0: protoblocktx_rc_0_2.Status
	(*Block)(nil),              // 1: protoblocktx_rc_0_2.Block
	(*Tx)(nil),                 // 2: protoblocktx_rc_0_2.Tx
	(*TxNamespace)(nil),        // 3: protoblocktx_rc_0_2.TxNamespace
	(*Read)(nil),               // 4: protoblocktx_rc_0_2.Read
	(*ReadWrite)(nil),          // 5: protoblocktx_rc_0_2.ReadWrite
	(*Write)(nil),              // 6: protoblocktx_rc_0_2.Write
	(*NamespacePolicy)(nil),    // 7: protoblocktx_rc_0_2.NamespacePolicy
	(*BlockInfo)(nil),          // 8: protoblocktx_rc_0_2.BlockInfo
	(*QueryStatus)(nil),        // 9: protoblocktx_rc_0_2.QueryStatus
	(*TransactionsStatus)(nil), // 10: protoblocktx_rc_0_2.TransactionsStatus
	(*StatusWithHeight)(nil),   // 11: protoblocktx_rc_0_2.StatusWithHeight
	(*Policies)(nil),           // 12: protoblocktx_rc_0_2.Policies
	(*PolicyItem)(nil),         // 13: protoblocktx_rc_0_2.PolicyItem
	nil,                        // 14: protoblocktx_rc_0_2.TransactionsStatus.StatusEntry
}
var file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_depIdxs = []int32{
	2,  // 0: protoblocktx_rc_0_2.Block.txs:type_name -> protoblocktx_rc_0_2.Tx
	3,  // 1: protoblocktx_rc_0_2.Tx.namespaces:type_name -> protoblocktx_rc_0_2.TxNamespace
	4,  // 2: protoblocktx_rc_0_2.TxNamespace.reads_only:type_name -> protoblocktx_rc_0_2.Read
	5,  // 3: protoblocktx_rc_0_2.TxNamespace.read_writes:type_name -> protoblocktx_rc_0_2.ReadWrite
	6,  // 4: protoblocktx_rc_0_2.TxNamespace.blind_writes:type_name -> protoblocktx_rc_0_2.Write
	14, // 5: protoblocktx_rc_0_2.TransactionsStatus.status:type_name -> protoblocktx_rc_0_2.TransactionsStatus.StatusEntry
	0,  // 6: protoblocktx_rc_0_2.StatusWithHeight.code:type_name -> protoblocktx_rc_0_2.Status
	13, // 7: protoblocktx_rc_0_2.Policies.policies:type_name -> protoblocktx_rc_0_2.PolicyItem
	11, // 8: protoblocktx_rc_0_2.TransactionsStatus.StatusEntry.value:type_name -> protoblocktx_rc_0_2.StatusWithHeight
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_init() }
func file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_init() {
	if File_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDesc), len(file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_goTypes,
		DependencyIndexes: file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_depIdxs,
		EnumInfos:         file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_enumTypes,
		MessageInfos:      file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_msgTypes,
	}.Build()
	File_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto = out.File
	file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_goTypes = nil
	file_platform_fabric_core_fabricx_committer_v2_protoblocktx_block_tx_proto_depIdxs = nil
}
